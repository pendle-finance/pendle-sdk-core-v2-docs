{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Utilities types and functions\n\n---"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Used external types and functions\n\nWe use some external packages, mainly `ethers`. So before reading further, please be sure that you are familiar with them first."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import type { providers, Signer } from 'ethers';\n\ntype Provider = providers.Provider;\n\n// these are exported to @pendle/sdk-v2\n// export { BigNumber as BN, BigNumberish } from 'ethers';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## type `Address`\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { Address } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```ts\ntype Address = `0x${string}`;\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "In Pendle SDK, we force `Address` to be a string that has `0x` as its prefix. It is used to avoid direct assignment from a string to an Address."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# function `toAddress(...)`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { toAddress } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```ts\nfunction toAddress(rawAddress: string): Address\n```\n\n_Cast_ a rawAddress to the `Address` type. This function **does not** validate the `rawAddress` string. The resulting `Address` will be transformed to lowercase."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## function `isSameAddress(...)`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { isSameAddress } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```ts\nfunction isSameAddress(address1: Address, address2: Address): boolean;\n```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\nCheck if two addresses are the same, by comparing them in **lowercase**."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## type `ChainId`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { ChainId } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```tsx\ntype ChainId = 1 | 43113 | 80001 | 43114;\n```\n\nThis type is a union of the chains’ IDs that are supported by Pendle."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## type `MainchainId`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { MainchainId } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```tsx\ntype MainchainId = 1 | 43113;\n```\n\nThis type is a union of the main chains’ IDs that are supported by Pendle."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## function `isMainchain(...)`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { isMainchain } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```tsx\nexport function isMainchain(chainId: ChainId): chainId is MainchainId;\n```\n\nCheck if a `ChainId` a `MainchainId`"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Examples"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "isMainchain(1)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "isMainchain(43114)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## type `NetworkConnection`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { NetworkConnection } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```tsx\nexport type NetworkConnection =\n    | { provider: Provider; signer?: undefined }\n    | { provider?: undefined; signer: Signer }\n    | { provider: Provider; signer: Signer };\n```\n\nThis type looks complicated, but it actually has only two fields:\n\n- `provider: Provider`\n- `signer: Signer`\n\nIt is written so so that one of the fields can be omitted, **but not both!** Also, we strongly recommend using `tsc` with `strict` mode."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Example"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { getDefaultProvider, Wallet } from 'ethers';\n\nconst provider = getDefaultProvider();\nconst signer = Wallet.createRandom();\n\n// ok examples\nconst nc1: NetworkConnection = { provider };\nconst nc2: NetworkConnection = { signer };\nconst nc3: NetworkConnection = { provider, signer};\n\n// not ok example\n// const nc4: NetworkConnection = {};"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## function `copyNetworkConnection(..)`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { copyNetworkConnection } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```typescript\nexport function copyNetworkConnection(networkConnection: NetworkConnection): NetworkConnection;\n```\n\nThis function **only** copies the `provide` and the `signer` fields of the input object."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Example"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { getDefaultProvider, Wallet } from 'ethers';\n\nconst provider = getDefaultProvider();\nconst signer = Wallet.createRandom();\n\nconst nc1 = { provider, aRandomField: 'foo' };\nconst nc2 = copyNetworkConnection(nc1);\n// Print the keys of nc2\nObject.keys(nc2);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'provider'\u001b[39m,",
                                "  \u001b[32m'signer'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## type `ContractLike<T>`"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { ContractLike } from '@pendle/sdk-v2';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "```tsx\ntype ContractLike<T extends Contract = Contract> = T | WrappedContract<T>;\n```\n\nSee this type in [Pendle SDK’s WrappedContract](TODO) <span style=\"color: red\">(TODO link)</span>"
            ],
            "outputs": []
        }
    ]
}